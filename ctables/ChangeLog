4/28/2016 peter
    * unset array in search -array and -array_with_nulls at atrt of each loop.

4/24/2016 peter
    * Fixes to tests framework for stapi.
      The stapi tests were not using the path in TCLLIBPATH because it was
      separated by : rather than space.

11/20/2014 zero
    * Add explicit (char *) cast to ckalloc calls as tcl86 defines the macro as returning void*
10/19/2012 peter
    * Move dirty set outside break statement.

8/21/2012 peter
    * Defer deallocation of blocks when garbage list is not being used
      to avoid crashes from conservative-use-after-free bugs.

8/12/2012 peter
    * Remove surplus optimization flags from ccflags.
    * Don't put chunks in the garbage list if there are no readers
    * Increase size of garbage pool blocks from 1K to 1M chunks.

7/14/2012 Peter
    * Add -foreground option to poll code.

7/4/2012 peter
    * Add -poll_interval and -poll_code options to read_tabsep and
      import_postgres_result. These work the same as the corresponding
      options in search.

6/28/2012 karl
    * Make MAP_NOCORE a shared memory flag default so that coredumps by
      default don't include the shared memory segment.  This can be
      enabled with "flags core" when mounting the shared memory segment.

6/11/2012 karl
    * Allow the OS to pick the location of shared memory segments.

    * Properly allocate assocData in the shared memory stuff.

    * Maintain an attach count on shared memory segments and only attach
      the same shared memory once no matter how many times it might be
      requested (by different speedtables C extensions).  (issues 18 and 27)

6/10/2012 karl
    * Use Tcl's interpreter-associated property lists to create a small structure
      to allow multiple speedtables C shared libraries to interoperate in the
      same shared memory segment.  (issues 18 and 27)

06/04/2012 karl
    * make ctable/configure actually use the highest version of pgtcl found 
      when --with-pgsql is specified.

03/20/2012 karl
    * Add introspection capability.  The name of the extension created,
      already a command, now has a new suboption, "tables", which will
      return a list of all the table definitions created by the extension.

    * A new suboption to a speedtable table creator command, "instances", 
      will now return a list of all of the instances of tables created by 
      that table creator that currently exist.

    * A new global variable, speedtablePackages, is appended with the 
      package name of each speedtables-generated package required by
      the Tcl program.  
      
      It's a little bit of a cheesy way to get the top level of 
      introspection but the problem is that there's no overarching
      speedtable package to contain a command to introspect the
      packages.

02/26/2012 bovine
    * Unify function exports to accomodate compilation with Tcl 8.6
      under gcc 4 (issues 13, 23).

    * Fix possible segfault during initialization of enums in
      shared-memory tables.

09/07/2011 bovine
    * Make ctable/configure detect the highest version of pgtcl found
      when --with-pgsql is specified.

09/01/2011 bovine
    * Adjust the head of the shmem freelist to a position near the
      successful allocation, to try to improve the performance of
      subsequent allocation requests (issue 22)

04/02/2011 peter
    * Make sure that hashEntry.key always points to a valid string so that
      if a row is deleted in the master while a reader is processing it,
      it won't segfault.

    * Fix shared memory tests to run cleanly without old Makefile.

03/21/2011 peter
    * Update manual for "minfree".

03/19/2011 peter
    * Track free memory in shared memory allocator. Verified that the tracking
      is correct. Added "quick" option to "share free" to get "tracked" rather
      than "calculated" bytes.

    * Add option to creating master table "minfree bytes" (can use k, m, or g
      suffix to bytes). Default is 10% of the table size, or at least 128k,
      up to 8M.

    * Check for minfree bytes before any Tcl command that can modify a master
      table. Return TCL_ERROR "Free shared memory low." if so.

03/08/2011 bovine
    * Add unified autoconf (TEA) system for all of speedtables (issue 15)

    * Release as version 1.8.2

03/07/2011 bovine
    * Update another version number in gentable.tcl

    * Release as version 1.8.1

03/07/2011 bovine
    * Release as version 1.8

02/14/2011 peter
    * Include change to ${table}_find_or_create to be sane and consistent
      about shared versus non-shared preallocated memory.

    * Fix gen_allocate to generate "${table}_allocate_may_fail" when
      "$may_fail" is non-zero.

02/14/2011 karl
    * Update gentable.tcl - fixed-string set code would always substitute
      the default string for an empty argument.  it should only do so if
      the default string is not empty.

      Sorting on boolean fields now works.

02/07/2011 bovine
    * Update build system to use autoconf (TEA 3.9) for better configurability
      and platform compatibility.

    * Allow compilation on Fedora 13 Linux (and possibly other distros).

02/03/2011 bovine
    * Change "share get" to only take one argument and not return a list.
      Add "share multiget" for multiple arguments and return a list. (issue 12)

    * Make all "share" commands return error for non-shared tables.

02/02/2011 bovine
    * Properly return sizes >2GB from "share info"

01/26/2011 bovine
    * Properly return sizes >2GB from "share free", and exclude memory in
      garbage pool that is not yet freed which was causing erroneous totals.

    * Properly use size_t/ssize_t types to avoid integer truncation and
      data corruption issues in shared memory tables >2GB.

    * Guard shared memory freeblocks, busyblocks, chunks, and pools by
      adding magic numbers and more data consistency checks.

    * Don't loop infinitely in _shmalloc when out of memory.

01/10/2011 bovine
    * Documention clarification for "size" option to "create" to indicate
      it is not a required parameter. Fixes github issue 7.

01/10/2011 peter
    * Guard around share_panic to fix reversion in 01/09 commit.

    * Don't try and shmdealloc keys from PRIVATE rows. (issue 9)

01/09/2011 peter
    * Add attributions in ChangeLog for latest changes by karl and peter

    * Handle out of memory without panicking in allocating a new varstring
      or key.

      TODO: handle out of memory without panicking for skiplists

01/06/2011 bovine
    * Properly parse create with panic option.  Fixes github issue 8.

12/28/2010 karl
    * Properly handle search with -get option when a list of fields are
      specified with -fields.  Tests updated as well.  Fixes github issue 5.

12/15/2010 peter
    * Dropping an index now clears the matching ctable list after
      deleting the skiplist.

12/7/2010 karl
    * Code generated for filters now checks to make sure the number of
      arguments passed to the filter are what was expected.

    * Handle varstring and fixedstring and key fields properly when
      generating filter code.

11/20/2010 peter
    * Explicitly handle 00..1F and UTF-8
    * Add strict_uri and strict_escape quoting

11/19/2010 peter
    * Fix tests not to leave crap in /tmp
    * First pass cleanup for signed char problems
    * Use snprintf instead of sprintf in ctable_io.c

8/21/2010 peter
    Don't reset walkType prematurely when looking at possible hash walks.

7/10/2010 peter
    Fixed description of "set" in ch5 of the manual.
    Added test for Tcl objects

3/18/2010 peter
    Automatically generate the code for arguments for cfilters

3/17/2010 peter
    *** Implemented native C filtering for search. ***

    # The Cfilter code fragment is not guaranteed to be a separate c function,
    # but it does allow local variables and the following names are in scope:
    #   interp - Tcl interpeter
    #   ctable - A pointer to this ctable instance
    #   row - A pointer to the row being examined
    #   filter - A TclObj filter argument passed from search
    #
    # Return:
    #   TCL_OK for a match.
    #   TCL_CONTINUE for a miss.
    #   TCL_RETURN or TCL_BREAK to terminate the search without an error.
    #   TCL_ERROR to terminate the search with an error.
    cfilter latorlong code {
      double target;
      if(Tcl_GetDoubleFromObj (interp, filter, &target) != TCL_OK)
        return TCL_ERROR;
      if(row->latitude == target || row->longitude == target) return TCL_OK;
      return TCL_CONTINUE;
    }

    * Documented and added test to "make test".

    * Fixed a bad optimization where the filter was ignored for -countOnly 1.

    * Added "ccode" top level hook for helper functions.

3/16/2010 peter
    Note explicitly that shared speedtables must ALL be part of the same C Extension.
    Add "share free" command to estimate free memory in a share.
    Change name of two structure elements to make it clear what they are:
      * garbage->block -> garbage->memory because it's a pointer to the memory chunk, not the containing block
      * pool->blocks -> pool->nblocks because it's a counter, not a pointer
    Update documentation and comments in shared/shared.c

3/15/2010 peter
    Allocate aligned size in shared memory.

3/9-3/12 2010 peter
    Big indexed null field cleanup.
    * Always index NULLs - changes to several paths
    * Remove row BEFORE making it non-null.
    * Rewrite varstring comparison code, split out the three special cases (NULL field, DEFAULT field, EMPTY field)
      into separate routines.
      * This removes some optimizations for avoiding call to strcmp in default strings, will put this back later.
      * Make sure that NULL string fields are sorted "high", and empty and not-null are sorted low.
    * Add package version to ID string.
    * Add debugging hooks "set ctable::localDefines(DEBUGMACRO) macrovalue" before defining table.
    * Don't run elsecase in null object cases if object is null. (FLAG)

9/30/2009 karl
    * Make searches with a negative requested offset return an error rather
      than causing a coredump.  Also enforce that search limit, if specified
      can't be negative either.

7/15/2009 karl
    * Include BSD's qsort.c, renamed to ctable_qsort.c / ctable_qsort_r()
      because some operating systems such as Linux don't include qsort_r().
      (Apparently Linux lib developers assume nobody will sort anything
       but strings.  Speedtables can sort shorts, ints, longs, wides, floats, 
       doubles, booleans, varstrings, fixedstrings, internet addresses, mac 
       addresses and tcl objects.)

7/14/2009 karl
    * Normalize the path to the stobj directory before attempting to make the
      directory so that if we get a permission denied, it'll tell us where it
      tried to create the directory, which is pretty helpful.

7/2/2009 peter
    * Make all possible symbols static with a CTABLE_INTERNAL macro, unless
      fullStatic is set to 0 in config.tcl (possible debug reasons?)
    * The Great Renaming:
	* CExtension -> speedtables
	* CTable -> table
	* ctables build directory in stapi, is now "stapi".
	* main build directory is now stobj
	* package require speedtables works
    * Bump version to 1.5
    * Quote all characters that aren't isprint()

7/1/2009 peter
    * Check for deleting inside a search.
    * Localize TCL version to one line in Makefile

6/30/2009 peter
    * Added more checks in shared memory code.
    * Updated commants and constant/variable names for more clarity.

6/29/2009 peter
    * Fixed file name test in shared/shared.c
    * Fixed multiple tests in tests/*
    * Removed apparent debug files not referenced by any tests.
    * Make gentable_stub.tcl an autogenerated file to make the version of
      ctables/speedtables consistent.
    * Modify common test code to get the version of tcl from 
      $::ctable::ctablePackageVersion
    * Modify Makefile to make the version of tclsh a parameter.
    * Add code to request a first-time probe for memory map.
    * Use INLINE macro in ctable_search.c

6/18/2009 karl
    * Turn off inlining in config.tcl.  We came across a case where 
      gcc 4.2.1 generated incorrect infinite-loop-causing code when 
      compiling the inlined skiplist routines.

6/10/2009 karl
    * Fixed a memory leak in ctable search.  Each time a search was performed,
      if a sort of the results was requested, for each field being sorted in
      reverse order (field name preceded by a minus sign), one allocation of
      the name of the field was leaked.

4/28/2009 karl
    * Fixed a bug in null and notnull comparison of varstring.  The string
      compare code created by gentable.tcl tried to look at row1's field
      (assuming a second compare function argument) that isn't present
      when the search term is null or notnull, causing a null pointer
      dereference.  Code now performs the null/notnull check before
      looking at row1's field.

4/27/2009 karl
    * Fixed a coredump in the read_tabsep method when field names are included 
      in the method arguments. It was caused by iterating over the wrong 
      variable (objc instead of nFields).

4/14/2009 peter
    * Modify the order of locking and copying the shared ctable into
      the dummy.
    * Clean up logic for optimizations in ctable_PrepareSearch, explicitly
      note that the count used is a "quick count" that's only meaningful one
      time. Fix the -countOnly optimization to match.

4/14/2009 karl
    * Fix bug affecting searches of shared memory ctables introduced
      by my bug fix from 3/30/2009.  We can't optimize away the search
      if it's a shared memory ctable and now we don't.

4/6/2009 karl
    * Fixed memory leak from redundant allocation of row1 in 
      ctable_ParseSearch() search with "in" compare function that would
      leak one row allocation per invocation.  Over a few million queries,
      it added up.

3/30/2009 peter
    * Fix for bug 2721735 - same shortcut as Karl's existed  in
      ctable_PerformSearch but didn't explicitly set the result to 0.

      This fix is redundant but should remain in place in case
      ctable_PerformSearch gets called directly in the future.

3/30/2009 karl
    * When setting up a ctable search in ctable_SetupSearch, if the row count 
      of the table is 0, bypass almost all of the search setup and 
      return TCL_RETURN to tell ctable_SetupAndPerformSearch to bail out, 
      as it already does in some cases to indicate that the search has been 
      optimized away.

      This is a fix for bug 2721735.  It also speeds up searches of empty 
      tables quite a bit, not that that matters very much.

3/26/2009 peter
    * Don't set the shared base if it's already set.

3/20/2009 peter
    * clean up null/default handling, remove some duplicate code, and rename
      the null-check commands.

3/15/2009 peter
    * added routine to verify all skiplists. $ctable verify ?-verbose?

11/18/2008 karl
    * Make table-destroying code into its own C routine, 
      ${table}_destroy_ctable, and make it callable with a null
      interp pointer so that it can be called from a Tcl_CmdDeleteProc.

      Create a Tcl_CmdDeleteProc named ${table}_cmdDeleteProc that
      takes a pointer to the ctable through the clientData argument
      and destroys it, and when creating a ctable, pass this function
      as the deleteProc.  This arranges for the delete proc to get
      called before the table is deleted from the interpreter.

10/22/2008 karl
    * Correct null checking for "tclobj" data type so that tclobj
      fields that are null do not get defined when doing array_get,
      etc.

10/20/2008 karl
    * Changed 'while processing search code body', 'while processing
      foreach code body' and 'while processing "in" compare function"
      to use Tcl_AddErrorInfo instead of Tcl_AppendResult, so they
      appear in the errorInfo traceback but not the error message itself.

8/21/2008 peter
    * Added [$ctable null] and [$ctable isnull]

8/03/2008 peter
    * Fixed typo in optimization table for indexed search.
    * Added test to cover all possible indexed searches.

7/13/2008 peter
    * Fixed handling of "-term"
    * Added "$ctable type command" as alias for "[$ctable type] command" for
      proxies.

7/05/2008 peter
    * -quote escape option, compatible with postgresql.
    * {$table getprop quote} to see what quoting is possible for the table.
    * Updated documentation and sourceforge home page.

7/01/2008 peter
    * -quote uri option for read/write tabsep, first cut.
    * Added tests for -quote stuff

6/23/2008 karl
    * When sorting varstrings, properly handle the cases where either or
      both string pointers are null.

6/19/2008 karl
    * Require a default field to be defined if a fixedstring is being
      defined with notnull set to 1.

    * If a fixedstring is notnull and an empty string is passed in for
      a set value, substitute the default string.

5/10/2008 peter
    * Fix for searching: needed to check for null value for varstring and
      replace it with a null value if a shortcut can't be found elsewhere.

5/10/2008 peter
    * Fix for sorting: was returning "success" on first null match on source
      fields.
      * The sort code seems to be doing a redundant set-or-check-result in
	various places.
    * Fix for sorting and searching: need to check for null value for varstring
      even if varstring is non-null, because it's still being initialised to
      null for default to save a bunch of copies of the default string.
      * The code should maintain a "${table}_nullString" and default values
	and use them instead of nulls, which sould save many checks in various
	places in the code, but this can't be changed until all the code
	is gone over to catch any more places where it uses ${fieldName}
	instead of ${fieldName}IsNull or ${fieldName}_allocatedLength for
	various purposes.

5/04/2008 peter
    * Make the "_key writing" behavior consistent between search -write_tabset
      with or without -with_field_names.
      + Is this consistent with read_tabsep? Should the alternate behavior
	be standard? See bug 1952116 on sourceforge.

4/23/2008 peter
    * Back out change of 4/22
    * Add struct to track "nullable" fields (either default value or
      not non-null)
    * Add "-with_nulls" to read_tabsep (to retain compatibility with
      existing stapi behavior):
      + Don't even insert nulls into the table if the value is null and
        the field is nullable.

4/22/2008 peter
    * Clean up checks for nulls
    * Ignore error from ${table}_set in ${table}_set_from_tabsep
      if ${table}_string_is_null(field)

4/4/2008 peter
    * Move re-initialization of ::ctable::fields:: from CExtension to
      CTable

3/30/2008 peter
    * Generate home page for speedtables.sourceforge.net
    * Remove duplicate legacy documentation from outside the manual.
      + Import what's necessary FROm that doc into the manual.

3/25/2008 peter
    * Update docs & examples to match changes to STDisplay

3/23/2008 peter
    * Limit restarts on shared search to 1000 cycles.

3/22/2008 peter
    * Ignore duplicate key columns in read_tabsep.
    * Don't generate a key column in search -write_tabsep if there's
      already one there.

3/21/2008 peter
    * Allow extra fields in read_tabsep when -with_field_names -nocomplain.

3/21/2008 peter
    * Rearranged the manual as multiple chapters.
    * Added documentation for search options -buffer, -delete, and -update.
    * Fixed many many documentation bugs.
    * Added many examples.
    * Fixed some corner cases to match the documentation.

3/16/2008 peter
    * rearranged the examples in the "demos" subdirectory, and fixed some bugs
      in them.
    * Simplified logic parsing arguments for read_tabsep and got rid of
      duplicate error message that was out of sync.

3/13/2008 peter
    * Imported pages manual into more easily manageable HTML as
      docs/manual.

3/06/2008 peter
    * Fixed import_tabsep - need to remove key column from list of field IDs
      passed to set_from_tabsep.

    * Added "-skip" option to read_tabsep for password file demo.

3/05/2008 peter
    * Added background polling for search, new options:
      -poll_interval rows (default 0)
      -poll_code {code} (default none)
	If a poll interval is specified but no code is provided, then it
	calls Tcl_DoOneEvent(0) ... equivalent of "update". If code is provided
	and no interval is specified, it uses CTABLE_DEFAULT_POLL_INTERVAL
	from ctable.h. Errors from the poll code are handled by the bgerror
	mechanism

    * Fixed some error handling problems in ctable_search.c

3/04/2008 peter
    * Allow search -compare {{in field {list...}}} even when field is
      not indexed.

3/03/2008 peter
    * Added "-nocomplain" option for "set" and "store" and "makekey"
      Need to add it for read_tabsep and import_postgres_result.

2/25/2008 peter
    The ctable search main loop is pretty complex, and many of the comments
    are misleading. I've fixed a number of them to try and make them clearer.

    * Pulled the code to prepare for transactions into a separate routine.

    TODO: pull out the optimization code, or split the skiplist and hashtable
    code into separate routines.

2/23/2008 peter
    * implemented "-tab" option to read_tabsep, write_tabsep, and
      search -write_tabsep to allow TSV files with fields containing
      tabs, and for compatibility with other token-separated files

2/22/2008 peter
    * implemented read_tabsep $fp -with_field_names, the counterpart to
      search -write_tabsep $fp -with_field_names 1

2/14/2008 peter
    * Depending on TCLLIBPATH to override auto_path isn't reliable.
      Instead, force auto_path to be something sane IN the tests dir.
      + Make changes to test config settings in tests/test_common.tcl
	so we don't have to pollute the default config.tcl

2/13/2008 peter
    * Search was not buffering for all transactions because with the change in
      meaning of "count" it was no longer a given that there was no buffering
      specified for all cases but -code. Fixed by doing the buffering test for
      everything but "CTABLE_SEARCH_ACTION_NONE" instead of just when code was
      not equal to NULL.
    * Add test for tsv being written properly.

1/27/2008 peter
    * Change -noKeys to -nokeys
    * Fix some error messages

1/24/2008 peter
    * Change syntax!
    * search now returns a count UNLESS a -code body is provided and includes
	a return statement.
      o -countOnly is accepted but ignored.
      o Internal changes:
	endAction -> action
	varNameObj -> rowVarNameObj
      o shouldn't change any existing legal code.
    * Minimal changes to tests.
    * Fix validation to return the exact string for tested cases.

1/22/2008 peter
    * Validate arguments for delete or exists methods.
    * Fix argument validation in a couple of other places to use
      Tcl_WrongNumArgs

1/4/2008 karl
    * Fix memory leak in search teardown that caused from one to three
      temporary rows allocated per search component to not be freed.

1/2/2008 peter
    * 64/32-bit compatibility - force cycle to long

12/31/2007
    * make RETURN work in ctable_search.c by tracking TCL_RETURN, TCL_BREAK,
      TCL_CONTINUE, etc...
    * Fix search panic - loop one more time to handle case where there's
      precisely one match AND it's the last time through the loop over an
      index AND it's got a break or return in it.

12/17/2007 peter
    Fixes to satisfy STDisplay:
    * Always include the "_key" entry in an array.
    * Add -noKey option to turn this off.

12/17/2007 karl
    * Adopted the code used to generate varstring field compare functions
      to make varstring sort comparisons work properly when one or both
      varstring pointers are null.

12/8/2007
    Much skiplist work:
    * Don't put NULL entries in skiplists at all.
    * Don't remove element from list if "prev" pointer is null. This is now
      an *invariant* in the ctable_lists code - the "prev" pointer is non-null
      if and only if the row is in a list.
    And support work:
    * Extend varstring null check code to check for default strings.

12/4/2007 peter
    * Store default values consistently in indexes.
    * Make sure that default values are stored efficiently in indexes by
      only checking if there's any defaults not stored in indexes after
      setting a whole new row.

10/3/2007 peter
    * generate config vars for libpq and libpgtcl in mkConfig.sh
    * Switch to libpgtcl-ng by default since it's got the right rpath.

9/30/2007 peter
    * Created system-dependent dynamically-generated sysconfig.tcl
      using mkConfig.sh to pull out some info from tclConfig.sh.
      Works with FreeBSD and Darwin, with only one platform-specific tweak
      other than fiddling with WITH_PGTCL.

9/22/2007 peter
    * Split configuration out into separate config.tcl, it was getting unweildy
    * Implemented optimized anchored searches (forgot that one, oops)

9/11/2007 peter
    * Return NULL rather than panicking in shmalloc when out of memory.
    * Catch NULL return from shmalloc and panic.
    * Initial support for normal TCL_ERROR handling when shared
      memory full. Create master ctable with "panic false" option to test.

9/10/2007 peter
    * Make sure the compare function in a cloned skiplist is from the 
      process that we're actually using to walk the skiplist.

9/7/2007 karl
    * Fix stuff to compile and work properly when shared memory isn't selected.

8/15/2007 peter
    * Added ability to set share modes: sync/nosync(default) and
      core(default)/nocore.
    * Move pool blocks containing newly freed chunks to the start of the
      pool list.
    * Try and re-use existing pool blocks that might not have shared memory
      allocated yet.
    * Handle "out of shared memory" better.

8/11/2007 peter
    * Shared tables work, all tests good.
    * Added method "getprop" to get various fixed properties of the ctable
      as a whole. Need to see about deprecating some of the commands like
      'key' and 'name' that are currently used for introspection.
    * Never used capabilities. Removed that method and will create properties
      when that's necessary.
    * Added method "share" to allow access to the shared memory extension.

8/6/2007 peter
    * Separated skiplists into "public" and "private" structures, with
      hook to clone the private structure of a skiplist

7/31/2007 peter
    * Parameterized shared memory debug trace.
    * Updated package version to 1.4 - long past time.

7/30/2007 peter
    * Tested reader side without concurrent updates.

7/27/2007 peter
    * Changing the order of operations in linked list handling to ensure that
      there are no "next link" pointers pointing into incompletely populated
      structures.

7/23/2007 peter
    * Got all the shared library stuff working on the master side, so far
      as I can tell without looking from the reader side. That's the next
      can of worms to pop.

7/16/2007 karl
    * Fix bug in boolean set source where it failed to break out of the
      switch statement.

7/15/2007 peter
	#ifdef WITH_SHARED_TABLES
     *  	Written ckalloc-alike wrapper for shmalloc.

     *  	Code to generate two possible sets of allocators,
		depending on whether shared table support is enabled or
		not.

     *  	Hash keys are in memory for master only, unless I further
		pervert the hash API.  Hash table proper is in main memory
		as well. This means that only the master can access keys.
		Shared tables *must not* have non-default keys, and *must*
		have skiplists. TODO: disable sharing if the table doesn't
		satisfy these requireents.
	#endif

7/15/2007 peter
     *  Implement ctable set commands keys for non-private rows as well.

7/15/2007 peter
     *  Add "-buffer" option to search. This explicitly forces the search
	results to be buffered, whether or not sorting or other transaction
	like operation is going on. This must be used if you're calling
	any "set" operation on a row that might modify the field you're
	walking (and should probably be used any time you may be using
	"set" operations on rows.

7/11/2007 peter
     *  remove the separate control flow for booleans by making the list
	name an optional argument on deffield

7/10/2007 peter
     *  Search optimizations:

	* If only one sort field, and search file == sort field, and walking
	  in order anyway, don't sort.

	* Pick the highest scoring comparison for the search field:
	    'in' = 100 points (and win)
	    hashed '=' = 100 points (and win)
	    skip '=' = 6 points
	    skip 'range' = 4 points
	    skip <= < >= = 2 points
	    skip > = 1 point
	  plus 1 point if it's the sort field.

7/8/2007 peter
     *  Added ctable search = or IN on hash

7/5/2007 peter
     *  ctable_search will use the first index it finds, not just
	the first comparison. This means that ${table}_search_compare
	needs to know which index to skip. Changed "tailoredWalk"
	to "skipIndex" default -1, and also let ${table}_search_compare
	pull that out of searchControl instead of passing it
	redundantly.

7/4/2007 peter
     *  Enabled "set" commands on ctable row for keyfield, but only for
	private rows.

7/3/2007 peter
     *  Added "key" type. Key is a restricted subset of varstr.
	* At the moment, keys are read-only (will change)
	* If no keys are specified, define a "hidden" _key variable.
	* Have not removed the old key attribute, have to change
	  that code to use the key type.
	* Important milestone: works without breaking any of the
	  tests if "key" is not used.
	* read_tabsep -noKeys and store using the key pseudo-field
	  when available.

6/21/2007 peter
     *  Make skiplist search selection table-driven. Make all possible
	comparisons use skiplists (add table entries).

     *  Note: there should be a way to make it NOT use skiplists,
	when you know that it's going to hit most of the rows and
	so a hashtable is going to be faster.

6/20/2007 peter
     *  Completely reorganised ctable search

	* Only really one path through search.
	* Currently, for compatibility, -index option or search+ term is
	  required to get skiplist search.
	* Should be easier to add more cases in search, other than
	  eq, range, and in
	* skiplist falls back on hash search if it can't take
	  advantage of skiplists

	* regression tests changed to ignore order of results in search+ tests,
	  since that's not predictable.

6/18/2007 peter
     *  Allow search -key -code with no -array or -get options.

     *  Add transaction tests to regression tests.

6/17/2007 peter
     *  First Cut at -delete and -update. Note - this verson passes
	the existing tests but I have not tested the new code beyond
	that. I wanted to get this into CVS before continuing.

6/2/2007 karl
    * Further parameterize the calls to compile stuff so that you can
      separately control where Tcl gets picked up from, where PostgreSQL
      gets picked up from, and whether you want Tcl memory debugging.

5/14/2007 karl
    * Fixed bug in "reset" method (${table}_delete_all_rows) where none
      of the hashtable string keys would be deleted.

3/21/2007 peter

     *  Backing out partial support for generated keys in read/write
	tabsep, need to make more changes to support them, and
	they're not really needed unless generating tabsep files
	outside ctables. It's only when you're importing data to
	ctables (with store or importing from postgres) that you
	need to generate the keys. This will be replaced by the new
	key type.


3/20/2007 peter
    * Implemented key generation for import_postgres_result. Have not
      done it for read_tabsep yet.

3/19/2007 peter
    * Made a number of cosmetic changes to make the variable names more
      consistent

    * Implemented "key" flag for field, and code to generate a key from
      the arguments on "store". Karl will probably want to change this
      to use the objects directly, but my ctable-fu is not good enough.

    * Implemented "$ctable keys". Returns the list of key fields.

    * Implemented "$ctable make_key $list". Returns the key for the list, for
      use with "$ctable set".

    * ctable store, ctable import_postgres_result -nokeys, and ctable
      read_tabsep -nokeys all return the (last) key generated. In the
      case of import/read_tabsep this is really only useful for sequence
      keys.

3/15/2007 peter
    * Moving functionality from ctable_server and sttp into the main ctable
      code so they're universally available without creating so many layers
      of sttp wrappers.

    * Implemented "$ctable store", using the same sequence numbers as
      read_tabsep and import_postgres_result.

2/15/2007 karl
    * Make ctable_RemoveNullFromIndex and ctable_InsertNullIntoIndex
      silently do nothing.  This really needs to be revisited at
      some point, the issue being how to represent our out-of-band
      null values safely when they occur in an index.

1/24/2007 karl
    * Fixed compiler error from fixedstring comparison routine generation.

    * Fixed recently introduced bug in IP address handling that could
      cause index corruption on indexed IP address fields.

    * Bumped version to 1.3 and taged it.

1/22/2007 karl
    * Add primary-key-design.txt to document a design for bringing the
      primary key in-band into the row, making it accessible for use in
      search and sort expressions, etc.

1/21/2007 karl
    * Bug fix involving search with -write_tabsep not happening.

    * Split out tests from serious-tests.tcl into serious-tests-body.tcl
      so we can use the same tests for client-server testing.

1/20/2007 karl
    * Added "-array" and "-array_with_nulls" search options.  Both take an
      array name, -array will set the fields all nonnull fields into the
      array and unset any fields that are null.  -array_with_nulls will
      set all the fields from the row into the named array, substituting
      the null value (by default, an empty string, but can be set in the
      creator table) for any fields that are null.

1/21/2007 karl
    * Added tests for -array and -array_with_nulls.

    * Updated docs, including stuff on how to make remote speed tables go fast.

1/16/2007 karl
    * Added new method, "batch", which takes a list of ctable commands,
      minus the table name (as that's implicit) and invokes each element
      as a method invocation on the current ctable, without invoking the
      tcl interpreter, accumulating results for elements that return 
      results or generate error returns, returning those as a list at
      the end.  
      
      This is pretty amazing.  
      
      This isn't so important for local ctables but will be a big win for 
      remote ctables, saving many network round-trips when there are many
      commands in the batch.

      search is not supported in a batch and the results are undefined.

    * Added "command" to the ctable creator table as a pointer to the
      ${table}ObjCmd, allowing direct calls from C to all Tcl-callable
      speed table functions without requiring the use of the Tcl interpreter!

    * Change -include_field_names in search to -with_field_names in 
      preparation for adding the same to read_tabsep.

    * Fix bug in -with_field_names where it just emitted the fields left
      to right instead of actually looking them up in the field list.

      Worked fine for all fields, not so good with a subset.

    * Updated speed table pages file (and export new PDF) to include docs on
      the "in" search term.

    * Hashtable key was getting deleted twice when a row was deleted.
      Fixed this and added tests.

    * Change all the ctable->creatorTable->stuff to ctable->creator->stuff.

1/15/2007 karl
    * Complete work on search+ where the first compare term is "in" and
      the field being compared is indexed.  Tests updated, although
      more comprehensive tests need to be written.

      Still not done, "in" when not the first term or the field isn't
      indexed, etc.

      Make "in" take a list of match values as the third argument.
      We originally did not have a sublist, it was "in field val val..."

    * Mapped the following structs to typedefs and made it use the typedefs:

        struct ctableTable -> CTable

	struct ctableSearchStruct -> CTableSearch

	struct ctableSearchComponentStruct -> CTableSearchComponent

	struct ctable_linkedListNodeStruct -> ctable_LinkedListNode

	struct ctable_baseRow -> ctable_BaseRows

	struct ctableCreatorTable -> ctable_CreatorTable

	struct ctableFieldInfo -> ctable_FieldInfo

    * Add testing the "in" search compare function to the big tests.

    * Generate a second million row test file containing some IP
      addresses and MAC addresses for testing that stuff.

1/14/2007 karl
    * Begin laying in the infrastructure for the new "in" search term.

1/12/2007 karl
    * To the command that's created corresponding to a C
      extension, add a new option, builder_version, which
      will return the package version of the ctable
      compiler that built it.

    * Include the modification time of the ctable library directory
      ($srcDir) in what we compare to see if we need to rebuild, 
      so if the mtime has changed, we'll regenerate and recompile 
      the extension.  This is at least helpful for the ctables 
      developers.

    * Fixed bug in search using -array_get with a specified set of fields
      (instead of all fields by default).  It used to not include the
      field names in the key-value pairs under those circumstances.

    * Removed superfluous argument to ctable_SetupSearch -- routines
      that have access to the ctable structure can find their own
      list of field names.

    * Inhibited generating index checking code in additional places
      when an index isn't defined for a field and reworked setting
      values around allowing and not allowing null values and having
      and not having indexes.

    * Added test for search's array_get and limited-field array_get.

    * Added test for search's "false" compare function and more tests
      for the "fields" method.

1/10/2007 karl
    * Allow optional -nokeys argument to import_postgres_result.

    * Make the *_delete routine take the ctable and a flag that says
      CTABLE_INDEX_NORMAL if the row is in its indexes, etc, or
      CTABLE_INDEX_PRIVATE if it isn't.  (For instance, rows generated
      as part of search components are never inserted into a table).

      If the delete type is "normal", the *_delete routine will remove
      the row from all of the indexes that are in existence for that
      table and it will remove the row from the table's hash table.

      In either case, the delete routine will delete any varstrings that
      are part of the row and then delete the row itself.

      This means that code doesn't have to know how and when to remove the
      row from any indexes.

    * By the above changes and a bit more, fixed a memory leak when
      completing searches.

    * Altered ctable_RemoveFromIndex and ctable_RemoveFromAllIndexes to
      not take an interpreter and have a void return as they cannot fail.

    * Now that performance has gotten a lot of attention we are turning
      our attention, at least temporarily, to memory utilization.

      Bring the hash table entry inline into the row being generated.
      Get rid of code for different hash key types.
      This saves two pointers, 8 bytes per row on a 32-bit machine,
      16 bytes per row if you have 64-bit pointers.

      This reduced the program size after loading the million-row test
      data set in "bigtests", with no indexes defined, on a Pentium 4 from
      123 MB to 105 MB, a 17% reduction in memory usage, with the loaded
      data now using about 2.5 times the amount of space used by the
      corresponding text file.  It grows to 190 MB with two indexes defined 
      and fully populated.

    * Include the build-with-compiler-debugging flag in what we compare
      to see if we need to rebuild, so if that flag is changed, we'll
      regenerate and recompile the extension.

1/8/2007 karl
    * Fix critical memory leak in *_set_from_tabsep, used by read_tabsep.

    * Fix minor memory leak in ctable_SearchAction that could occur
      for matching rows under certain circumstances based on what form 
      the results were requested in.

1/7/2007 karl
    * Update "reset" and "destroy" methods to walk the table using
      the all-rows linked list instead of walking the hash table,
      resulting in a 33% performance improvement deleteing a
      million-row four-element table on a G4.

    * Revert handling of the registered proc hashtables to using the
      Tcl hashtable routines rather than our custom version as the
      custom version is about to evolve specifically to go into rows
      of ctables.

    * Copy Hash.3 that documents hashtable routines in Tcl and update it
      for changes made for our private version.  More to come.

    * Change speedtables hash routines to have compare routines return
      0 for a match, -1 for less than and 1 for greater than rather than
      1 for a match and 0 for "not equal" in preparation of using the
      actual field in the row as the hash key and bootstrapping our
      existing per-field compare routines to do the comparing.

    * When generating the field compare routine for strings, check the
      first characters for nonequality and handle explicitly, only
      calling strcmp if the first characters are identical.

1/6/2007 karl
    * Make write_tabsep walk the all-rows linked list instead of the
      hashtable, for no good reason as it's deprecated anyway but
      I guess it's good practice.

1/4/2007 karl
    * Adapt the Tcl hashtable routines for speedtables's own use.

    * Modify the hashtable routines to allocate 16 buckets initially,
      instead of 4, and to grow the tables 16X at a time instead of
      4X at a time, resulting in far fewer hashtable rebuilds when
      inserting into a large table, providing about a 7% increase
      in overall speed table insertion performance.

1/4/2007 karl
    * Simplify init-exten.c-subst by exploiting the not per-definition
      customized "struct ctableCreatorTable", removing a substitution,
      and making speed tables compile properly again when defining
      multiple tables.

1/3/2007 karl
    * Support unique indexes using "unique 1" in field definition.

      Warning - as yet unresolved bug can result in coredumps when
      a field defined as unique has a row's value changed to something
      that's a duplicate.

    * Support "=" as a "magic" search+ first search term (in addition to
      "range", which is already support) to use the field's skip list index,
      if it exists, and super accelerate the search.

    * Even if they're searching with -count 0, if they've specified that
      they want field names emitted, emit them.

    * In search code, pull out common code between search and search+
      in preparation for unifying search and search+ and even adding
      additional ways to walk such as safe walking to allow deletion
      of matches, etc.

    * In search code, pull matchCount, tailoredWalk and sortTable into
      the ctable search structure rather than passing them around
      discretely.

    * Extract about 100 lines of common code between search and search+
      and turn it into a function called by both.  It's a start.

1/2/2007 karl
    * Make skip list insert routine "jsw_sinsert_linked" support a "unique" 
      flag that, if set, has the routine return 0 when an insert would result
      in a row with a duplicate key for that indexed field.  If unique is
      0, duplicates are allowed.

    * Use embedded array of pointers to nodes inside a skip list node so
      that skip list node generation requires only one memory allocation
      instead of two and a requiring only a corresponding single free
      when they're deleted.

      This change resulted in a 14.6% increase in index creation performance
      on a PowerPC G4 running the match-test-index2.tcl test and search+
      query performance improvements of between 9% and 16%.

      Running match-test-index3.tcl, which generates the million-row index
      on the fly, there is no performance increase in indexing but queries
      again run 12% to 16% faster.

      A caution with regard to these kinds of measurements, speed tables
      performance is greatly affected by the size of your processor's L1
      cache.

1/1/2007 karl
    * Update speed table pages file (and export new PDF) to include docs on
      the key-value pairs that can follow a field definition, including
      "indexed", "notnull", "default", "length", and "unique".

12/30/2006 karl
    * Add introspection.txt doc that had been sitting around that has the
      rationale and design for adding introspection as committed on 12/28.

12/28/2006 karl
    * Maintain all the key-value pairs for each defined field and make them
      accessible in ctable creator table structures via the per-field
      ctableFieldInfo struct, one for property keys  and one for property 
      values.  Also add "field" method to get properties, a key-value
      property list, or the value of any field's property via stuff like
      $ctable field $fieldName property $propName, etc.

12/25/2006 karl
    * When generating the search compare routine for a given table, use
      the field compare routines without distinguishing the field type
      if the comparison type is <, <=, =, !=, >, >= or "range".  This is
      faster and makes range work when it isn't the first comparison routine 
      with "search+" and under any circumstances with "search".

    * Detect attempts to invoke comparison types that aren't implemented
      for a given data type and panic rather than just make it do nothing.
      Catches "range" compares that aren't the first element of a search+
      as we have to rethink searching to implement "range".

      Probably should be either made to work or detected and errored upon at 
      search creation time -- we can't error out from a compare routine 
      because there's no error return path -- they return -1, 0 or 1.

    * Update docs.  Add the PDF files to CVS. A problem with how Pages 
      works makes putting the Pages doc in CVS painful related to it
      blowing away the CVS directories within itself.

12/24/2006 karl
    * When defining fields "notnull 1", avoid generating null checking
      and comparing code, hardwire null search results, etc.
      Major performance boost when fields are defined notnull, 5% - 50%
      when searching, for instance.

    * During generation, set field definition key-value pairs into arrays 
      named after the fields inside the ::ctable::fields namespace and access 
      those via upvar rather than constantly array setting a local array
      from the field definition key-value pairs.  It's cleaner and makes
      generation faster.

    * Make "fields" generate the field list using Tcl objects of the field
      names that we already had laying around, rather than generating new
      ones from the field name strings.  Small optimization but there it was.

12/23/2006 karl
    * Made automatic row IDs (created when reading tabsep-data) not reset
      upon subsequent read_tabsep, but do reset after "reset" method is
      invoked.

12/20/2006 karl
    * Added new "index" method suboption, $ctable index span $fieldName,
      which will return a list containing the lexically lowest index value
      and lexically highest index value for the indexed field specified.

    * Added search comparisons "notmatch" and "notmatch_case", which are the 
      inverse of "match" and "match_case".  This will allow ctables to be a
      drop-in replacement for using the DIOdisplay package to create web stuff,
      and will have to do until we bite the bullet and write more general
      purpose comparison routines, i.e. with expression booleans other than 
      the implicit "and".

    * Make the search routine construct a row and store the field it wants
      to compare against into the row with the standard functions, then
      pass that special row to the comparison routine and clean up aftewards.
      It's faster and it makes mac and inet types be searchable, rangeable,
      etc.

    * Factor common code for writing tab-separated field names into a
      new function, ctable_WriteFieldNames.

    * Remove conditional compliation of new-style linked list traversal
      in search versus old-style hashtable traversal -- we're fully
      committed to the higher-performing linked list traversal now.

    * Fix bug with -key in search+ where, when emitting a list of
      field names, we don't include the "_key" pseudofield.

    * Make bigtests use the BSD extension to calculate actual elapsed
      system and user time, if available, and fall back to using
      Tcl's "time" command if that extension is unavailable.

    * Improve search performance by doing less pointer dereferencing
      and inlining some more stuff.

    * Reordering structs to have pointers first produces a minor
      speed improvement and less padding of C structures.

12/19/2006 karl
    * Proceduralize generating index inserting and deleting code and
      don't generate it for a field when an index isn't defined on that
      field.

12/18/2006 karl
    * Fix bug where skip list code assumed it would get 64 bits of random
      number instead of the 32 it got, making skip lists really slow
      on 64-bit machines like AMD64 (where sizeof(size_t) == 8)

    * Moved where the *_setup routine got called when initializing a
      creator table so the per-field field name object pointers got
      set properly.  This fixes "indexed" and "indexable" options to
      "index" method.

12/16/2006 karl
    * Added "indexable" and "indexed" suboptions to the ctable "index"
      method to list the names of the fields that can be indexed
      (indexes were defined on the fields when the table was created)
      and to list the names of the fields that have indexes currently
      defined against them.

12/15/2006 karl
    * Fixed sort to work in both search and search+.  (It previously did not
      work with search+.)  Fold ctable_SearchAction and ctable_SkipSearchAction
      into one, also gaining the ability to specify -key in search+.

    * Fixed bug in "reset" method, introduced with indexes, where indexes
      weren't getting deleted and the doubly linked list of all rows was
      not getting reset.

    * Created 25 pages of ctables documentation in Pages, starting with
      doc.txt.

12/14/2006 karl
    * Indexes now support duplicate entries.

12/7/2006 karl
    * Major performance boost by maintaining a linked list among all of
      the rows of a table and walking that while searching rather than
      enumerating the hash table.  Increased search performance from
      for a brute-force unanchored text search of 1,000,000 rows by
      more than threefold.

    * Implement an array of linked list nodes defined in the row
      structure definition, one for all rows (index 0) and the rest
      for fields declared as indexable, in preparation for supporting
      indexes that can contain duplicate entries.  Also they're defined
      in such a way that they are guaranteed to be in the same place in
      all rows so different code can use a "base row" definition and
      access the linked list nodes without having been generated to
      understand the data that follows it.

12/6/2006 karl
    * Added code to repeatably generate the test data in bigtests and got 
      rid of the 24 meg file of test data that was previously there.

12/5/2006 karl
    * Version 3.0 tagged for release.

    * Resolve the bugs in search with offset and limit specified and
      the different results whether it was sorted or unsorted.

    * Merge the skiplist development branch back into the mainline ctables
      CVS branch.

    * Bring search limit with and without sort into compliance that limit is 
      the limit on the number of rows returned.

    * Revived "write_tabsep" and "foreach" at the request of the userbase,
      although they are still to be considered deprecated.

    * Make $table index create $field take an optional argument which is
      the depth of the skip list, like 24 would be good if you had 4M
      rows.  (This should be more hidden but it's still in dev.)

    * When building for source-level debugging, still use some level
      of optimization.

    * Updated docs to reflect usage of "index" method and fully document
      "search" method.

    * Fix up argument error message for search to include all the options.

12/4/2006 karl
    * Skip list indexes are working for creation, dropping, inserting,
      updating, and searching.

    * Added "search+" that works like search but on skip lists instead
      of the hash table.  This isn't the permanent solution.

    * Added pointers to functions to make empty rows, set elements
      of rows, set elements of rows to null, get values from rows
      to the ctable table structure.  It's getting to where
      you can write all sorts of high speed C ctable access stuff
      that isn't tailored to a specific data structure.

      Internally you see this in how much code is in ctable_search.c
      and how that code makes use of these pointers to access fields
      in tables without knowing how those tables are structured.

    * Got rid of generating custom pointer names in tons of places,
      substituting "row" instead, significantly simplifying the
      code.

    * "...index count $field" is now working. 

    * Attempts to insert duplicate entries in skip lists is now an error.
      We'll eventually support having duplicate keys but not currently.

    * Propagate the Tcl interpreter pointer, ctable pointer, and whether 
      a row is new or not into *_set, *_set_fieldobj, *_incr, 
      *_incr_fieldobj and *_set_null routines.  It's a lot of overhead
      to allow fields in a table to be indexed on demand, but since
      we're generating the code, we can also not generate if we're
      somehow told there won't be indexes or on what fields there
      won't be indexes.

12/3/2006 karl
    * Add "list" option to "... index" to get a list of indices for
      the given field's index.  While this will be wildly inefficient
      with hundreds of thousands of records, it's handy to facilitate
      testing and verification that the indexes are in sync.

    * Add "count" option to "... index" method to get the count.
      Currently inoperative as the skip list library defined the
      count but doesn't manage it.  We'll fix that shortly.

    * Add "notnull 1" options to inhibit generation of null check code
      for a field.  **Incomplete**  be addressed in numerous places
      and may not even be worth it(?)

    * Tighten up generated code by stripping leading and trailing newline
      from substituted multi-line elements.

12/2/2006 karl
    * Propagate the ctableTable pointer down into the ${table}_set
      routine in preparation of handling triggers/indexes.

    * Create a "dump" suboption for indexes.

    * Propagate a pointer to the table-specific ${table}_get_string function
      into the creatorTable struct for the corresponding table to that
      routines with no specific awareness of how a table has been
      generated can still get the contents of fields and stuff.


12/1/2006 karl
    * Generate new per-field row-to-row comparison routines for use with
      skip lists and, eventually, sort comparisons and search comparisons.

    * For each table create an array of pointers to field compare functions 
      indexed by field number.

    * When creating a skip list, store the compare function by getting it
      from the creator table structure.

    * Add new ctable method, "index", with subcommands "create" and "drop"

    * Remove deprecated "foreach", "sort", "write_tabsep", "import"
      and "export" methods.

    * Migrate another hundred lines out of gentable.tcl and into
      command-body.c-subst, reducing complexity in gentable.tcl.

11/30/2006 karl
    * Standardize field creation to always be key-value pairs, so you
      now might say "varchar foo default bar" instead of
      "varchar foo bar" so that you can do other stuff like
      "index 1 unique 1"

    * Make new command the same name as the extension name, except the first
      char is uppercase (strangely, something to do with TEA), that will
      give you back the definition that made the C extension in the first
      place.

    * Add new method to tables, cextension, that returns the C extension
      that defined them.

    * Created skiplist development branch.  Got skiplist code to
      install in the ctable package and compile cleanly within 
      ctables.  Merged development branch back into mainline.

11/29/2006 karl
    * Tagged 2_0 for release.

    * Doubled performance for searches with "match" components
      where we use ultra-fast Boyer-Moore when the search is unanchored
      (*pattern*) and not too fancy (no embedded []?*\ characters).

    * Add a switch to gentable.tcl to show compiler command lines.

11/28/2006 karl
    * Fix bug where, when searching with no sorting and a limit, you'd get
      one less record than you'd asked for even if one more was available.

11/26/2006 karl
    * Add -include_field_names to search.  If set to true and using
      -write_tabsep, will make the first line be the field names
      that matching.

    * Manage varstring space a little more efficiently by not freeing
      the string whenever it gets set if it's already set.  By looking
      to see what was allocated, we reuse what's there if it's big enough.

    * Add "incr" method.  It takes take key-value pairs or a list of
      key-value pairs.  It will increment each numeric field by
      the corresponding amount and return a list of the new values
      of all incremented fields.

    * Add new compare methods "match" and "match_case" that perform
      a Tcl_StringMatch on the field (currently varchar-only) and
      select it if it matches else skips it.  match is case-insensitive
      and match_case is case-sensitive.

11/25/2006 karl
    * In search's -sort option, fields in the field list that begin with
      a dash are sorted in descending order rather than ascending order.

    * Make "null" and "notnull" comparisons work.

11/24/2006 karl
    * Rename search's -list option to -get.  Rename its -array to -array_get
      and add -array-get_with_nulls.

    * Pull the number of fields, array of field types and array of elements
      needing quoting into the table creator structure.

    * Bring pointers to functions lappend_field_and_nameobj and
      lappend_nonnull_field_and_nameobj into the table creator structure.

    * If no reference fields are specified with a search (-fields list),
      you get all fields by default.

    * Convert ${table}_gen_nonnull_keyvalue_list and 
      ${table}_gen_keyvalue_list to return a Tcl_Obj rather than
      setting the interpreter result object and return TCL_OK
      so that they're more general purpose.  Modify code that
      previously called this to set the interpreter obj result
      with the result.

11/23/2006 karl
    * The "foreach" and "sort" methods are deprecated in favor of
      "search" but will be left in until legacy code can be updated.

    * Simplify things by using standardized table creator and table
      structures rather than generating custom ones for each 
      ctable -- we hide the differences behind the value of the
      hashtable and cast in our custom-generated code.

    * Get rid of the TAILQ stuff -- it wasn't fully implemeneted and
      was a good idea but it's also hackish in terms of it's cpp
      macros that create all the forward and backward casts -- needs
      thought.

    * Migrate standardized structures that are not custom-generated
      into a new include file, ctable.h

    * Reference the registered proc table pointer from the master
      structure for the ctable type.

11/22/2006 karl
    * Factored out a 702-line piece of code for the main body of
      generated ctable code into its own file to make things
      more manageable.

11/21/2006 karl
    * write_tabsep now works (or again works) if no field names
      are specified.

11/15/2006 karl
    * Switch debugging off by default.

    * Add the -nokey switch to import_tabsep and export_tabsep.  If set,
      export_tabsep will not include the key in what it emits, and 
      import_tabsep will self-generate an ascending integer key when
      importing.

    * Make linking with debug libraries and generating with compiler
      debugging more parameterized.

    * Make sort comparison of MAC and IP addresses work better or,
      more to the point, work at all.

    * When a row fails input checks during read_tabsep, report the line
      number in the error message.

    * Update documentation.

11/1/2006 karl
    * Add a sort method that lets you sort on multiple fields and call
      through to a callback that processes them in order, like foreach.
      Can't currently do descending and arguments are positional --
      would like to have a "walk" method that can sort, etc.

9/14/2006 karl
    * Expand the set command to allow it to take a list of key-value
      pairs in addition to its existing functionality.  This allows
      replacing     eval foo set $key [array get dataArray]
      with          foo set $key [array get dataArray]

9/9/2006 karl
    * Add an ability to specify a pattern when reading and writing
      tab-separated data.  Currently supports "-glob pattern" in
      the read_tabsep and write_tabsep methods.  Pattern is compared
      to the key field.

8/15/2006 karl
    * Make the optional match pattern on "foreach" precede the code body
      rather than come after it.

7/19/2006 karl
    * Fairly decent job of documenting things as they are, although currently
      only in a "straight text" style.

7/10/2006 karl
    * Detect defining a table with no fields and report as an error rather
      than generating stuff the C compiler can't understand.

    * Catch errors defining ctables and save off the errorInfo traceback
      that's basically internal to ctable.  Made a new proc,
      ::ctable::get_error_info, that will return that info, and include
      a note in the error message to run that proc to see the internal
      errorInfo traceback.

    * Create new method, export, that's the analog of import.  It will
      export all fields or specified fields from each stored row by
      repeated calling the passed proc with an argument consisting of
      a list containing the key and all specified fields (or all fields,
      if no fields are specified.)

    * New C routines, *_dstring_append_get_tabsep that will generate
      tab-separated (and newline-terminated) fields from a row
      into a DString, and *_export_tabsep that will write all the
      rows in a table, tab-separated, to a channel.

    * Add of write_tabsep method that will write all of the fields, or
      the named fields, tab-separated, to the specified Tcl channel.
      Note that this currently does no quoting to make sure that
      tabs or newlines in strings don't screw things up.

    * New C routines, *_set_from_tabsep that will take a pointer to
      a row, a tab-separated import string, an array of field numbers
      and a number of fields and set the values into the row.  The
      first field is the key.
      *_import_tabsep reads lines from a channel and
      invokes *_set_from_tabsep on each line.

    * Add of read_tabsep method that, using the above routines,  will read 
      all of the fields, or the named fields, tab-separated, from the 
      specified Tcl channel.  Note that, like write_tabsep, this currently 
      does no quoting to make sure that tabs or newlines in strings don't 
      screw things up.

    * Make subobj datatype work again.

7/6/2006 karl
    * Fix the build on Darwin to not use the Postgres stuff.  Still haven't
      gotten the shared library on Darwin to work properly with the
      libpq and libpgtcl libraries.

7/5/2006 karl
    * Add a new method, array_get_nonnull, that will only return nonnull
      key-value pairs.

    * Make array_get work like array_get_nonnull, removing array_get_nonnull.
      Create array_get_with_nulls that replaces the prior behavior of
      array_get.

    * Added a new *_set_null function that, given a pointer to a row and
      a field number, will set the corresponding field's null value bit
      to true.  Note, there will be no reciprocal *_set_nonnull function
      because when the null bit is set, the corresponding value is
      undefined -- the only way to set a field nonnull is to set a value
      into it with the corresponding table's *_set routine.

    * New import_postgres_result can import a multirow PostgreSQL result
      directly into a ctable without any intervening per-row Tcl.  This
      is extremely fast.  Excluding the pg_exec overhead, on a 2.2 GHz
      AMD64 we can import 210,000 8-element rows per second.

7/4/2006 karl
    * Add a new method, null_value, to the meta table object that sets
      a null value that is returned by set and get when a field's value
      hasn't been set or has been set with the defined null_value.
      The default is an empty string.

    * Rework default stuff so that if a default value is defined, upon
      init of a new row, elements with default values will be set with
      the default values and the corresponding null value bits will be
      set to say that the elements are not null.  Anything without a
      default value predefined has its null bit set.

    * Change the syntax of the CExtension command to require a version
      number and take the code as the third argument.  This means the
      enter extension code body is specified on the CExtension command
      line via "{...}", which allowed EndExtension to move into the
      ctable namespace and be invoked automatically by CExtension at
      the end of code generation.  This will allow us to scarf off a
      complete copy of the code being fed to CExtension, which will
      let us see if it's the same as we got last time and keep us from
      doing a generate/compile/link phase if nothing's changed.

    * Create a CTableBuildPath command that sets where we will build.
      Include the version number in the filename of the generated C
      source and the object file that we compile to.

    * Scarf off the CExtension source code and compare it to what we're
      being asked to build now.  If they're the same, don't bother.

    * Record the CVS ID of the CTable generator in the scarfed off
      CExtension source code file (.ct file).  When checking to see
      if a build is necessary, also compare them.  If they don't match,
      do the build.  This way, if there's any change in the generator
      software, a build will occur even if the CExtension code hasn't
      changed.

    * Add the build path to the auto_path if it's not already there.
      Do a pkg_mkIndex on the build directory if we generated something.
      (This makes "package require" work for the extension we created.)

    * Add a Makefile.  It's currently lame.  Add automation to copy
      qhehe.h to the target directory if there isn't something there matching.


7/2/2006 karl
    * Keep track of string lengths for varstring fields to prevent lots
      of unnecessary counting and to lay the groundwork for character
      quoting that we'll be implementing soon, with a tradeoff off somewhat 
      larger row size as we're carrying string lengths along with pointers
      to strings in each rows.

    * For varstrings, create a Tcl_Obj containing the default value and
      increment its reference count at setup time, and when returning the 
      default value, simply return a pointer to that Tcl_Obj rather than
      creating a new string obj.

    * Optimization for varstring defaults.  If the default is an empty
      string, only generate one empty string obj default and use that
      as the default for each varstring with an empty string, rather than 
      creating an empty obj for each.

    * *_get C function now returns a (Tcl_Obj *) to an object representing
      the thing you asked for, rather than appending to a list on the
      Tcl result.  This makes it much more useful from C.

    * Now generating *_get_string function that takes a pointer to a row,
      a field in the row, a pointer to a length integer and a pointer to
      a Tcl_Obj that we use for utility purposes and it generates or
      otherwise finds the string and returns a pointer to the string,
      setting the length pointer to the length of the string if the length
      pointer isn't NULL.

    * Tagged Revision 1.1 (rev1_1)

    * When setting a string, compare that string to the default value and
      if it is the same as the default value, store a null pointer rather
      than allocating the string, copying it, and storing that pointer.
      When fetching a string, as before, provide the default value if the
      pointer within the row is null.

    * Enforce that field names must start with a letter and can contain
      only upper and lowercase letters, digits, and underscores.

    * Quote backslash sequences and control characters that are to
      appear in C strings using a cquote function generated by Peter
      at the next desk over at 6 pm on 7/3/2006.  Thank you, Peter.

    * Fix bug in array_get where no keys are specified.  It was
      returning exactly half as many fields as it should have. Oops.


7/1/2006 karl
    * Generate enum entries for fields using a proc.  That proc makes the
      field names unique, for example, FIELD_MAC now becomes for table
      "cable_device", FIELD_CABLE_DEVICE_MAC.

    * Add new "array_get" method that will let you one or more fields,
      or all fields, in "array get" format, i.e. key value [key value...]"

    * Make it work under FreeBSD as well as Darwin.  Eventually we will
      have to at least parse tclConfig.sh and possibly even have our
      own GNU autoconf thang.

    * Emit a enumerated typedef for the CTable types.  Also enumerate
      a corresponding array of char pointers containing the type names.

    * Emit an enum *_types for each defined table that has the enumerated
      ctable type for each field in the table.  This will allow us at
      runtime to easily and efficiently determine the type of any field from 
      C.  Soon, from Tcl as well.

    * Add of new method, fieldtype, which will return the CTable type of
      the passed-in field.

    * Add of new method, needs_quoting, which returns one if the passed-in
      field requires or may require quoting (i.e. could contain characters
      that could trip up a database insert, CSV export, or something like
      that.)

